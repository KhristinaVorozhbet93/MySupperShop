@using OnlineShop.HttpApiClient;
@using OnlineShop.HttpModels.Requests;
@using OnlineShop.HttpModels.Responses;
@inject NavigationManager manager

<MudItem xs="3" lg="3" Class="d-flex">
    <MudPaper Width="300px" Class="pa-4 mb-4" Style="background-color:#6ec04a">
        <MudCard Style="height: 560px; position:relative">
            <MudCardMedia Image="@Product!.Image" Height="200" @onclick="ToProductInfoPage"
                          Style="cursor:pointer" />
            <MudCardContent Style="min-height:100px">
                <MudText Class="textwhite" Typo="Typo.subtitle1">
                    Название товара:
                    @Product.Name
                </MudText>
                <MudText Class="textsilver" Typo="Typo.subtitle1">
                    Цена:
                    @Product.Price
                </MudText>
                <MudText Class="textwhite" Typo="Typo.subtitle1">
                    Дата производства:
                    @Product.ProducedAt
                </MudText>
                <MudText Class="textwhite" Typo="Typo.subtitle1">
                    Срок годности:<br />
                    @Product.ExpiredAt
                </MudText>
                <MudText Class="textwhite" Typo="Typo.subtitle1">
                    Описание:
                    @Product.Description
                </MudText>
            </MudCardContent>
            <div style="position:absolute; bottom:10px">
                <MudNumericField @bind-Value="Quantity" Style="margin-left:10px;"
                                 Variant="Variant.Text" Min="1" Max="10" />

                <MudButton @onclick="ToAddInCart" Style="
                background-color:#6ec04a;margin-left:10px;margin-top:10px;color:white">
                    В корзину
                </MudButton>
            </div>

        </MudCard>
    </MudPaper>
</MudItem>

@code {
    [Parameter] public ProductResponse? Product { get; set; }
    [Inject] private IMyShopClient ShopClient { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    public double Quantity { get; set; } = 1;
    private CancellationTokenSource _cts = new();
    private CartRequest cartRequest = new();
    private ProductRequest productRequest = new();

    public void ToProductInfoPage()
    {
        manager.NavigateTo($"/products/{Product!.Id}");
    }

    public async Task ToAddInCart()
    {     
        var account = await ShopClient.GetAccount(_cts.Token);
        if (Product is not null)
        {
            productRequest.Id = Product.Id;
            productRequest.Name = Product.Name;
            productRequest.Description = Product.Description;
            productRequest.Price = Product.Price;
            productRequest.ProducedAt = Product.ProducedAt;
            productRequest.ExpiredAt = Product.ExpiredAt;
            productRequest.Image = Product.Image;
        }
        cartRequest.Product = productRequest;
        cartRequest.AccountId = account.Id;
        cartRequest.Quantity = Quantity;
        try
        {
            await ShopClient.AddProductInCart(cartRequest, _cts.Token);
            await DialogService.ShowMessageBox("Успешно", "Продукт добавлен!");
        }
        catch (ArgumentNullException)
        {
            await DialogService.ShowMessageBox("Ошибка", $"Продукт не добавлен!");
        }

    }
}
